# /bioinformatics-portfolio/exercises/hamming_distance.py
# Calculate the Hamming distance between two DNA sequences

def hamming_distance(seq1, seq2):
    # Ensure both sequences are the same length by trimming to the shorter one
    min_length = min(len(seq1), len(seq2))
    seq1 = seq1[:min_length]
    seq2 = seq2[:min_length]

    # Initialize counter for the Hamming distance
    distance = 0

    # Compare each position of the sequences
    for i in range(len(seq1)):
        if seq1[i] != seq2[i]:
            distance += 1  # Increment the counter if the positions do not match

    return distance


# Example input sequences
seq1 = "CCTGGACTAGTGTACTCATGAGGGAGCTTTGCTTCCGCGAGTCAGAGGATTTCGTACCCACCTTCCCTATACAGTCTGGCGGTGGCTCTATGTGCAGAGACCGCCGGAGATGACTCACATGCTTCGGACATCAGCAATTGAGTAGATCCATGACCGAAAATCGACGGTATCCTAAAAATTAAGAAAGCTGCGGATCTGCCCAAACGGTACGTCCGTCCAAATAACGACGGATTTTGACTCATGACACACATGTAGATATGCCCTGCCTCGTTGCCGCGTCATGTTGTACATTATCATAGAAGGCTCCCGGGAGGTTGGCCAGTGTCTGCAACCGTTCCGTTTTCTCCTGCCGCGTGGGACCCTACGTGTCTTCTGAATCCTCGGGGGAGCCGATGCATGCGCTCCTCTCTCCGTAGTGAAATCAAGATATGCATGATCAGGTCAATTCGCAGGCCGAGCCGTATGCGAGCCTGTGCAGCAGGTCGCGAATGCGGCGCGCTCCTTGTAAGCCTATGCCGACGGTGCAACACGGCGTATATTTCACCAATTCAATCACGGCGGGGCGTTCGCTGCAGTCCTCCCAATTGCATCAACATCCTCTCATTCCTTGGACCCAATTGTGCCTGGCGAAGTCCCGCGCTGCCACCCGGATTAGAACTACAGGTTGAAGCAGCAGGTTTAATCGCGGGCACCTTGGTACCGTCCCGAACCCCCAAAGTCTGTTACGCGATTTCGGAACGCGCGGGACATGTTCCGAGATAAGAGCCTGTGCAAACTTTACTATTATCTATCCAAGCGTCGGCCCCACTGTTGATGCCGGCGCGTATACGCGTAATGTGAAGGTTATATGGAATTACAGCGTGAGACATCGCCGATAGGCTATCGCTCCACGCCTGTAGGACGTAGGCGTTTGTCAGCGTCGCGAATTAAGACCCCGGTGATGCATAATATAAGAAAGCTATCTCTGTACCGCAAGTGGCGGCCTTTCCCCCATAACATAACCCCCAAGGAGGGCTGCACAATCCTGCTACAAGGGAGGGGGACCTGGTAAATCGGTTTCTAACTACGC"
seq2 = "GGGGCTCCGTTCCCACTACGCCGTGCTTAGGATGGTACATCACGACCGAGTTGATGTTGCCCCCCAACAATATAAAATTAAGTAAGCTGAAAACTTACGGCGCTACCCCAGTATTAGGCTCCTGCACTGCCCTCAAATGTAGCAGAATGTGGTCGTATCTGTGGCCAATGAACTAACAAGGCCTCTAGAAAACGATAAAGTTCGTAGTGAGAGCGGGGCGGCCCGTCGTCACACGGGACCGACCCTTTAGCTGAAGACATCGAATCATCGGTCGACGCCCCGAGTTATATGATCAACGGACACTTCATTGTACGCGCTCTTGCTCCCAGCCGCACTATAACCGAGCACGTCCCGGGATGAAACTCCAGAGACAGGCCCATAGATTGTTCTGAGCTCGGGATTACCTAGCGTTTGCTATCCTGTACTTAAGGACTAGATCGCCAGGACTTCTATCAGGAATGGGGTTCGCCTCACATCCAGAGTCCCCCCTATGCCTGAGACGTTTATTACTTAAAGAAGGGCGACCACGCTATTGGTGGATCAGCCAGCCGAAGCTCTCATCTCCGTTTTGGCGCCCAAGTGGAAATGACTACAGGAAGATCCCTATTGTGATACTAGGGCCTTTTGAGCTCCATGAGTCAGATAATCAGGCCACTGGGTGGGCATGCGAAAGCAAGCTCAATTTACCACAGCTGGCAACACAGTTCTCTTAGGTTCGGGCACTCCGCCGTGATGTAACCACGTCAGCACTGGGGGTTGAAGGATGATATTTAAGTGAGTCCAGAGCTAACACCCAATCAGGGGACAGATTCCAGTCAGCTGCTGCGCGAATAATTCTACCAACAGGGCCGTCATTATTGTACTCGGAAGTGGCTTACAATCCTCTTGGACCACTATTCCCGCCACGTGAACAGCTTGATGATTCCTGCCTCGTGCGTATCAGGTGAGGTGTTGTCATTCCGCCGACCTACACTTCAGAGCTACCTTTTGATATCTACTTCCGGCTAAGGTAGTTGCTAACGAAGGACTCGATTTCCCACCGGCCGTCTTAAATGGTGGTTTACATCGA"

# Calculate the Hamming distance
hamming_distance_value = hamming_distance(seq1, seq2)
print(f"The Hamming distance is: {hamming_distance_value}")
